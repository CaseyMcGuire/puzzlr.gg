// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"puzzlr.gg/src/server/db/ent/codegen/game"
)

type GameBoard struct {
	Rows []*GameBoardRow `json:"rows"`
}

type GameBoardRow struct {
	Elements []*string `json:"elements"`
}

// GameWhereInput is used for filtering Game objects.
// Input was generated by ent.
type GameWhereInput struct {
	Not *GameWhereInput   `json:"not,omitempty"`
	And []*GameWhereInput `json:"and,omitempty"`
	Or  []*GameWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// create_time field predicates
	CreateTime      *time.Time   `json:"createTime,omitempty"`
	CreateTimeNeq   *time.Time   `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []*time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []*time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGt    *time.Time   `json:"createTimeGT,omitempty"`
	CreateTimeGte   *time.Time   `json:"createTimeGTE,omitempty"`
	CreateTimeLt    *time.Time   `json:"createTimeLT,omitempty"`
	CreateTimeLte   *time.Time   `json:"createTimeLTE,omitempty"`
	// update_time field predicates
	UpdateTime      *time.Time   `json:"updateTime,omitempty"`
	UpdateTimeNeq   *time.Time   `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []*time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []*time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGt    *time.Time   `json:"updateTimeGT,omitempty"`
	UpdateTimeGte   *time.Time   `json:"updateTimeGTE,omitempty"`
	UpdateTimeLt    *time.Time   `json:"updateTimeLT,omitempty"`
	UpdateTimeLte   *time.Time   `json:"updateTimeLTE,omitempty"`
	// type field predicates
	Type      *game.Type  `json:"type,omitempty"`
	TypeNeq   *game.Type  `json:"typeNEQ,omitempty"`
	TypeIn    []game.Type `json:"typeIn,omitempty"`
	TypeNotIn []game.Type `json:"typeNotIn,omitempty"`
	// user edge predicates
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
	// winner edge predicates
	HasWinner     *bool             `json:"hasWinner,omitempty"`
	HasWinnerWith []*UserWhereInput `json:"hasWinnerWith,omitempty"`
	// current_turn edge predicates
	HasCurrentTurn     *bool             `json:"hasCurrentTurn,omitempty"`
	HasCurrentTurnWith []*UserWhereInput `json:"hasCurrentTurnWith,omitempty"`
}

type Mutation struct {
}

type NewTodo struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

// Information about pagination in a connection.
// https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
type PageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor,omitempty"`
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor,omitempty"`
}

type Query struct {
}

type Todo struct {
	ID   string `json:"id"`
	Text string `json:"text"`
	Done bool   `json:"done"`
}

// UserWhereInput is used for filtering User objects.
// Input was generated by ent.
type UserWhereInput struct {
	Not *UserWhereInput   `json:"not,omitempty"`
	And []*UserWhereInput `json:"and,omitempty"`
	Or  []*UserWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// email field predicates
	Email             *string  `json:"email,omitempty"`
	EmailNeq          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGt           *string  `json:"emailGT,omitempty"`
	EmailGte          *string  `json:"emailGTE,omitempty"`
	EmailLt           *string  `json:"emailLT,omitempty"`
	EmailLte          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`
	// games edge predicates
	HasGames     *bool             `json:"hasGames,omitempty"`
	HasGamesWith []*GameWhereInput `json:"hasGamesWith,omitempty"`
}

// Possible directions in which to order a list of items when provided an `orderBy` argument.
type OrderDirection string

const (
	// Specifies an ascending order for a given `orderBy` argument.
	OrderDirectionAsc OrderDirection = "ASC"
	// Specifies a descending order for a given `orderBy` argument.
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
