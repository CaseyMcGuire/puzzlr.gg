// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (ga *Game) User(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ga.NamedUser(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ga.Edges.UserOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ga.QueryUser().All(ctx)
	}
	return result, err
}

func (ga *Game) Winner(ctx context.Context) (*User, error) {
	result, err := ga.Edges.WinnerOrErr()
	if IsNotLoaded(err) {
		result, err = ga.QueryWinner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ga *Game) CurrentTurn(ctx context.Context) (*User, error) {
	result, err := ga.Edges.CurrentTurnOrErr()
	if IsNotLoaded(err) {
		result, err = ga.QueryCurrentTurn().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Games(ctx context.Context) (result []*Game, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedGames(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.GamesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryGames().All(ctx)
	}
	return result, err
}
