// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"puzzlr.gg/src/server/db/ent/codegen/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// HashedPassword holds the value of the "hashed_password" field.
	HashedPassword string `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Games holds the value of the games edge.
	Games []*Game `json:"games,omitempty"`
	// WonGames holds the value of the won_games edge.
	WonGames []*Game `json:"won_games,omitempty"`
	// CurrentTurnGames holds the value of the current_turn_games edge.
	CurrentTurnGames []*Game `json:"current_turn_games,omitempty"`
	// GamePlayer holds the value of the game_player edge.
	GamePlayer []*GamePlayer `json:"game_player,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedGames            map[string][]*Game
	namedWonGames         map[string][]*Game
	namedCurrentTurnGames map[string][]*Game
	namedGamePlayer       map[string][]*GamePlayer
}

// GamesOrErr returns the Games value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GamesOrErr() ([]*Game, error) {
	if e.loadedTypes[0] {
		return e.Games, nil
	}
	return nil, &NotLoadedError{edge: "games"}
}

// WonGamesOrErr returns the WonGames value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) WonGamesOrErr() ([]*Game, error) {
	if e.loadedTypes[1] {
		return e.WonGames, nil
	}
	return nil, &NotLoadedError{edge: "won_games"}
}

// CurrentTurnGamesOrErr returns the CurrentTurnGames value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CurrentTurnGamesOrErr() ([]*Game, error) {
	if e.loadedTypes[2] {
		return e.CurrentTurnGames, nil
	}
	return nil, &NotLoadedError{edge: "current_turn_games"}
}

// GamePlayerOrErr returns the GamePlayer value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GamePlayerOrErr() ([]*GamePlayer, error) {
	if e.loadedTypes[3] {
		return e.GamePlayer, nil
	}
	return nil, &NotLoadedError{edge: "game_player"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldEmail, user.FieldHashedPassword:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldHashedPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hashed_password", values[i])
			} else if value.Valid {
				u.HashedPassword = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryGames queries the "games" edge of the User entity.
func (u *User) QueryGames() *GameQuery {
	return NewUserClient(u.config).QueryGames(u)
}

// QueryWonGames queries the "won_games" edge of the User entity.
func (u *User) QueryWonGames() *GameQuery {
	return NewUserClient(u.config).QueryWonGames(u)
}

// QueryCurrentTurnGames queries the "current_turn_games" edge of the User entity.
func (u *User) QueryCurrentTurnGames() *GameQuery {
	return NewUserClient(u.config).QueryCurrentTurnGames(u)
}

// QueryGamePlayer queries the "game_player" edge of the User entity.
func (u *User) QueryGamePlayer() *GamePlayerQuery {
	return NewUserClient(u.config).QueryGamePlayer(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("codegen: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("hashed_password=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// NamedGames returns the Games named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedGames(name string) ([]*Game, error) {
	if u.Edges.namedGames == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedGames[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedGames(name string, edges ...*Game) {
	if u.Edges.namedGames == nil {
		u.Edges.namedGames = make(map[string][]*Game)
	}
	if len(edges) == 0 {
		u.Edges.namedGames[name] = []*Game{}
	} else {
		u.Edges.namedGames[name] = append(u.Edges.namedGames[name], edges...)
	}
}

// NamedWonGames returns the WonGames named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedWonGames(name string) ([]*Game, error) {
	if u.Edges.namedWonGames == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedWonGames[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedWonGames(name string, edges ...*Game) {
	if u.Edges.namedWonGames == nil {
		u.Edges.namedWonGames = make(map[string][]*Game)
	}
	if len(edges) == 0 {
		u.Edges.namedWonGames[name] = []*Game{}
	} else {
		u.Edges.namedWonGames[name] = append(u.Edges.namedWonGames[name], edges...)
	}
}

// NamedCurrentTurnGames returns the CurrentTurnGames named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedCurrentTurnGames(name string) ([]*Game, error) {
	if u.Edges.namedCurrentTurnGames == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedCurrentTurnGames[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedCurrentTurnGames(name string, edges ...*Game) {
	if u.Edges.namedCurrentTurnGames == nil {
		u.Edges.namedCurrentTurnGames = make(map[string][]*Game)
	}
	if len(edges) == 0 {
		u.Edges.namedCurrentTurnGames[name] = []*Game{}
	} else {
		u.Edges.namedCurrentTurnGames[name] = append(u.Edges.namedCurrentTurnGames[name], edges...)
	}
}

// NamedGamePlayer returns the GamePlayer named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedGamePlayer(name string) ([]*GamePlayer, error) {
	if u.Edges.namedGamePlayer == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedGamePlayer[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedGamePlayer(name string, edges ...*GamePlayer) {
	if u.Edges.namedGamePlayer == nil {
		u.Edges.namedGamePlayer = make(map[string][]*GamePlayer)
	}
	if len(edges) == 0 {
		u.Edges.namedGamePlayer[name] = []*GamePlayer{}
	} else {
		u.Edges.namedGamePlayer[name] = append(u.Edges.namedGamePlayer[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User
