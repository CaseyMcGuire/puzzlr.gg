// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"puzzlr.gg/src/server/db/ent/codegen/game"
	"puzzlr.gg/src/server/db/ent/codegen/gameplayer"
	"puzzlr.gg/src/server/db/ent/codegen/user"
)

// GamePlayer is the model entity for the GamePlayer schema.
type GamePlayer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// GameID holds the value of the "game_id" field.
	GameID int `json:"game_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GamePlayerQuery when eager-loading is set.
	Edges        GamePlayerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GamePlayerEdges holds the relations/edges for other nodes in the graph.
type GamePlayerEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Game holds the value of the game edge.
	Game *Game `json:"game,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GamePlayerEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// GameOrErr returns the Game value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GamePlayerEdges) GameOrErr() (*Game, error) {
	if e.Game != nil {
		return e.Game, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: game.Label}
	}
	return nil, &NotLoadedError{edge: "game"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GamePlayer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gameplayer.FieldID, gameplayer.FieldUserID, gameplayer.FieldGameID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GamePlayer fields.
func (gp *GamePlayer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gameplayer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gp.ID = int(value.Int64)
		case gameplayer.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				gp.UserID = int(value.Int64)
			}
		case gameplayer.FieldGameID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field game_id", values[i])
			} else if value.Valid {
				gp.GameID = int(value.Int64)
			}
		default:
			gp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GamePlayer.
// This includes values selected through modifiers, order, etc.
func (gp *GamePlayer) Value(name string) (ent.Value, error) {
	return gp.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the GamePlayer entity.
func (gp *GamePlayer) QueryUser() *UserQuery {
	return NewGamePlayerClient(gp.config).QueryUser(gp)
}

// QueryGame queries the "game" edge of the GamePlayer entity.
func (gp *GamePlayer) QueryGame() *GameQuery {
	return NewGamePlayerClient(gp.config).QueryGame(gp)
}

// Update returns a builder for updating this GamePlayer.
// Note that you need to call GamePlayer.Unwrap() before calling this method if this GamePlayer
// was returned from a transaction, and the transaction was committed or rolled back.
func (gp *GamePlayer) Update() *GamePlayerUpdateOne {
	return NewGamePlayerClient(gp.config).UpdateOne(gp)
}

// Unwrap unwraps the GamePlayer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gp *GamePlayer) Unwrap() *GamePlayer {
	_tx, ok := gp.config.driver.(*txDriver)
	if !ok {
		panic("codegen: GamePlayer is not a transactional entity")
	}
	gp.config.driver = _tx.drv
	return gp
}

// String implements the fmt.Stringer.
func (gp *GamePlayer) String() string {
	var builder strings.Builder
	builder.WriteString("GamePlayer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gp.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", gp.UserID))
	builder.WriteString(", ")
	builder.WriteString("game_id=")
	builder.WriteString(fmt.Sprintf("%v", gp.GameID))
	builder.WriteByte(')')
	return builder.String()
}

// GamePlayers is a parsable slice of GamePlayer.
type GamePlayers []*GamePlayer
