// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldHashedPassword holds the string denoting the hashed_password field in the database.
	FieldHashedPassword = "hashed_password"
	// EdgeGames holds the string denoting the games edge name in mutations.
	EdgeGames = "games"
	// EdgeWonGames holds the string denoting the won_games edge name in mutations.
	EdgeWonGames = "won_games"
	// EdgeCurrentTurnGames holds the string denoting the current_turn_games edge name in mutations.
	EdgeCurrentTurnGames = "current_turn_games"
	// EdgeGamePlayer holds the string denoting the game_player edge name in mutations.
	EdgeGamePlayer = "game_player"
	// Table holds the table name of the user in the database.
	Table = "users"
	// GamesTable is the table that holds the games relation/edge. The primary key declared below.
	GamesTable = "game_players"
	// GamesInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GamesInverseTable = "games"
	// WonGamesTable is the table that holds the won_games relation/edge.
	WonGamesTable = "games"
	// WonGamesInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	WonGamesInverseTable = "games"
	// WonGamesColumn is the table column denoting the won_games relation/edge.
	WonGamesColumn = "user_won_games"
	// CurrentTurnGamesTable is the table that holds the current_turn_games relation/edge.
	CurrentTurnGamesTable = "games"
	// CurrentTurnGamesInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	CurrentTurnGamesInverseTable = "games"
	// CurrentTurnGamesColumn is the table column denoting the current_turn_games relation/edge.
	CurrentTurnGamesColumn = "user_current_turn_games"
	// GamePlayerTable is the table that holds the game_player relation/edge.
	GamePlayerTable = "game_players"
	// GamePlayerInverseTable is the table name for the GamePlayer entity.
	// It exists in this package in order to avoid circular dependency with the "gameplayer" package.
	GamePlayerInverseTable = "game_players"
	// GamePlayerColumn is the table column denoting the game_player relation/edge.
	GamePlayerColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldHashedPassword,
}

var (
	// GamesPrimaryKey and GamesColumn2 are the table columns denoting the
	// primary key for the games relation (M2M).
	GamesPrimaryKey = []string{"user_id", "game_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// HashedPasswordValidator is a validator for the "hashed_password" field. It is called by the builders before save.
	HashedPasswordValidator func(string) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByHashedPassword orders the results by the hashed_password field.
func ByHashedPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHashedPassword, opts...).ToFunc()
}

// ByGamesCount orders the results by games count.
func ByGamesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGamesStep(), opts...)
	}
}

// ByGames orders the results by games terms.
func ByGames(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGamesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWonGamesCount orders the results by won_games count.
func ByWonGamesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWonGamesStep(), opts...)
	}
}

// ByWonGames orders the results by won_games terms.
func ByWonGames(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWonGamesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCurrentTurnGamesCount orders the results by current_turn_games count.
func ByCurrentTurnGamesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCurrentTurnGamesStep(), opts...)
	}
}

// ByCurrentTurnGames orders the results by current_turn_games terms.
func ByCurrentTurnGames(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCurrentTurnGamesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGamePlayerCount orders the results by game_player count.
func ByGamePlayerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGamePlayerStep(), opts...)
	}
}

// ByGamePlayer orders the results by game_player terms.
func ByGamePlayer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGamePlayerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newGamesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GamesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, GamesTable, GamesPrimaryKey...),
	)
}
func newWonGamesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WonGamesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WonGamesTable, WonGamesColumn),
	)
}
func newCurrentTurnGamesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CurrentTurnGamesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CurrentTurnGamesTable, CurrentTurnGamesColumn),
	)
}
func newGamePlayerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GamePlayerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, GamePlayerTable, GamePlayerColumn),
	)
}
