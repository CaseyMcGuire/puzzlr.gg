// Code generated by ent, DO NOT EDIT.

package game

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the game type in the database.
	Label = "game"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldBoard holds the string denoting the board field in the database.
	FieldBoard = "board"
	// EdgePlayerOne holds the string denoting the player_one edge name in mutations.
	EdgePlayerOne = "player_one"
	// EdgePlayerTwo holds the string denoting the player_two edge name in mutations.
	EdgePlayerTwo = "player_two"
	// EdgeWinner holds the string denoting the winner edge name in mutations.
	EdgeWinner = "winner"
	// EdgeCurrentTurn holds the string denoting the current_turn edge name in mutations.
	EdgeCurrentTurn = "current_turn"
	// Table holds the table name of the game in the database.
	Table = "games"
	// PlayerOneTable is the table that holds the player_one relation/edge.
	PlayerOneTable = "games"
	// PlayerOneInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	PlayerOneInverseTable = "users"
	// PlayerOneColumn is the table column denoting the player_one relation/edge.
	PlayerOneColumn = "game_player_one"
	// PlayerTwoTable is the table that holds the player_two relation/edge.
	PlayerTwoTable = "games"
	// PlayerTwoInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	PlayerTwoInverseTable = "users"
	// PlayerTwoColumn is the table column denoting the player_two relation/edge.
	PlayerTwoColumn = "game_player_two"
	// WinnerTable is the table that holds the winner relation/edge.
	WinnerTable = "games"
	// WinnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	WinnerInverseTable = "users"
	// WinnerColumn is the table column denoting the winner relation/edge.
	WinnerColumn = "game_winner"
	// CurrentTurnTable is the table that holds the current_turn relation/edge.
	CurrentTurnTable = "games"
	// CurrentTurnInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CurrentTurnInverseTable = "users"
	// CurrentTurnColumn is the table column denoting the current_turn relation/edge.
	CurrentTurnColumn = "game_current_turn"
)

// Columns holds all SQL columns for game fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldType,
	FieldBoard,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "games"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"game_player_one",
	"game_player_two",
	"game_winner",
	"game_current_turn",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeTIC_TAC_TOE Type = "TIC_TAC_TOE"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeTIC_TAC_TOE:
		return nil
	default:
		return fmt.Errorf("game: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Game queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByPlayerOneField orders the results by player_one field.
func ByPlayerOneField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerOneStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlayerTwoField orders the results by player_two field.
func ByPlayerTwoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerTwoStep(), sql.OrderByField(field, opts...))
	}
}

// ByWinnerField orders the results by winner field.
func ByWinnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWinnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByCurrentTurnField orders the results by current_turn field.
func ByCurrentTurnField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCurrentTurnStep(), sql.OrderByField(field, opts...))
	}
}
func newPlayerOneStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerOneInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PlayerOneTable, PlayerOneColumn),
	)
}
func newPlayerTwoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerTwoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PlayerTwoTable, PlayerTwoColumn),
	)
}
func newWinnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WinnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, WinnerTable, WinnerColumn),
	)
}
func newCurrentTurnStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CurrentTurnInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CurrentTurnTable, CurrentTurnColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
