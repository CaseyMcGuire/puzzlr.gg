// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"puzzlr.gg/src/server/db/ent/codegen/game"
	"puzzlr.gg/src/server/db/ent/codegen/user"
)

// Game is the model entity for the Game schema.
type Game struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Type holds the value of the "type" field.
	Type game.Type `json:"type,omitempty"`
	// Board holds the value of the "board" field.
	Board [][]string `json:"board,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameQuery when eager-loading is set.
	Edges           GameEdges `json:"edges"`
	user_won_games  *int
	user_turn_games *int
	selectValues    sql.SelectValues
}

// GameEdges holds the relations/edges for other nodes in the graph.
type GameEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// Winner holds the value of the winner edge.
	Winner *User `json:"winner,omitempty"`
	// CurrentTurn holds the value of the current_turn edge.
	CurrentTurn *User `json:"current_turn,omitempty"`
	// GamePlayer holds the value of the game_player edge.
	GamePlayer []*GamePlayer `json:"game_player,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedUser       map[string][]*User
	namedGamePlayer map[string][]*GamePlayer
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e GameEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// WinnerOrErr returns the Winner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameEdges) WinnerOrErr() (*User, error) {
	if e.Winner != nil {
		return e.Winner, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "winner"}
}

// CurrentTurnOrErr returns the CurrentTurn value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameEdges) CurrentTurnOrErr() (*User, error) {
	if e.CurrentTurn != nil {
		return e.CurrentTurn, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "current_turn"}
}

// GamePlayerOrErr returns the GamePlayer value or an error if the edge
// was not loaded in eager-loading.
func (e GameEdges) GamePlayerOrErr() ([]*GamePlayer, error) {
	if e.loadedTypes[3] {
		return e.GamePlayer, nil
	}
	return nil, &NotLoadedError{edge: "game_player"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Game) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case game.FieldBoard:
			values[i] = new([]byte)
		case game.FieldID:
			values[i] = new(sql.NullInt64)
		case game.FieldType:
			values[i] = new(sql.NullString)
		case game.FieldCreateTime, game.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case game.ForeignKeys[0]: // user_won_games
			values[i] = new(sql.NullInt64)
		case game.ForeignKeys[1]: // user_turn_games
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Game fields.
func (ga *Game) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case game.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ga.ID = int(value.Int64)
		case game.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ga.CreateTime = value.Time
			}
		case game.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ga.UpdateTime = value.Time
			}
		case game.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ga.Type = game.Type(value.String)
			}
		case game.FieldBoard:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field board", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ga.Board); err != nil {
					return fmt.Errorf("unmarshal field board: %w", err)
				}
			}
		case game.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_won_games", value)
			} else if value.Valid {
				ga.user_won_games = new(int)
				*ga.user_won_games = int(value.Int64)
			}
		case game.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_turn_games", value)
			} else if value.Valid {
				ga.user_turn_games = new(int)
				*ga.user_turn_games = int(value.Int64)
			}
		default:
			ga.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Game.
// This includes values selected through modifiers, order, etc.
func (ga *Game) Value(name string) (ent.Value, error) {
	return ga.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Game entity.
func (ga *Game) QueryUser() *UserQuery {
	return NewGameClient(ga.config).QueryUser(ga)
}

// QueryWinner queries the "winner" edge of the Game entity.
func (ga *Game) QueryWinner() *UserQuery {
	return NewGameClient(ga.config).QueryWinner(ga)
}

// QueryCurrentTurn queries the "current_turn" edge of the Game entity.
func (ga *Game) QueryCurrentTurn() *UserQuery {
	return NewGameClient(ga.config).QueryCurrentTurn(ga)
}

// QueryGamePlayer queries the "game_player" edge of the Game entity.
func (ga *Game) QueryGamePlayer() *GamePlayerQuery {
	return NewGameClient(ga.config).QueryGamePlayer(ga)
}

// Update returns a builder for updating this Game.
// Note that you need to call Game.Unwrap() before calling this method if this Game
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *Game) Update() *GameUpdateOne {
	return NewGameClient(ga.config).UpdateOne(ga)
}

// Unwrap unwraps the Game entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *Game) Unwrap() *Game {
	_tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("codegen: Game is not a transactional entity")
	}
	ga.config.driver = _tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *Game) String() string {
	var builder strings.Builder
	builder.WriteString("Game(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ga.ID))
	builder.WriteString("create_time=")
	builder.WriteString(ga.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ga.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ga.Type))
	builder.WriteString(", ")
	builder.WriteString("board=")
	builder.WriteString(fmt.Sprintf("%v", ga.Board))
	builder.WriteByte(')')
	return builder.String()
}

// NamedUser returns the User named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ga *Game) NamedUser(name string) ([]*User, error) {
	if ga.Edges.namedUser == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ga.Edges.namedUser[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ga *Game) appendNamedUser(name string, edges ...*User) {
	if ga.Edges.namedUser == nil {
		ga.Edges.namedUser = make(map[string][]*User)
	}
	if len(edges) == 0 {
		ga.Edges.namedUser[name] = []*User{}
	} else {
		ga.Edges.namedUser[name] = append(ga.Edges.namedUser[name], edges...)
	}
}

// NamedGamePlayer returns the GamePlayer named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ga *Game) NamedGamePlayer(name string) ([]*GamePlayer, error) {
	if ga.Edges.namedGamePlayer == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ga.Edges.namedGamePlayer[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ga *Game) appendNamedGamePlayer(name string, edges ...*GamePlayer) {
	if ga.Edges.namedGamePlayer == nil {
		ga.Edges.namedGamePlayer = make(map[string][]*GamePlayer)
	}
	if len(edges) == 0 {
		ga.Edges.namedGamePlayer[name] = []*GamePlayer{}
	} else {
		ga.Edges.namedGamePlayer[name] = append(ga.Edges.namedGamePlayer[name], edges...)
	}
}

// Games is a parsable slice of Game.
type Games []*Game
