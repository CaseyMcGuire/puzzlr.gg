// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"puzzlr.gg/src/server/db/ent/codegen/game"
	"puzzlr.gg/src/server/db/ent/codegen/gameplayer"
	"puzzlr.gg/src/server/db/ent/codegen/predicate"
	"puzzlr.gg/src/server/db/ent/codegen/user"
)

// GamePlayerUpdate is the builder for updating GamePlayer entities.
type GamePlayerUpdate struct {
	config
	hooks    []Hook
	mutation *GamePlayerMutation
}

// Where appends a list predicates to the GamePlayerUpdate builder.
func (gpu *GamePlayerUpdate) Where(ps ...predicate.GamePlayer) *GamePlayerUpdate {
	gpu.mutation.Where(ps...)
	return gpu
}

// SetUserID sets the "user_id" field.
func (gpu *GamePlayerUpdate) SetUserID(i int) *GamePlayerUpdate {
	gpu.mutation.SetUserID(i)
	return gpu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (gpu *GamePlayerUpdate) SetNillableUserID(i *int) *GamePlayerUpdate {
	if i != nil {
		gpu.SetUserID(*i)
	}
	return gpu
}

// SetGameID sets the "game_id" field.
func (gpu *GamePlayerUpdate) SetGameID(i int) *GamePlayerUpdate {
	gpu.mutation.SetGameID(i)
	return gpu
}

// SetNillableGameID sets the "game_id" field if the given value is not nil.
func (gpu *GamePlayerUpdate) SetNillableGameID(i *int) *GamePlayerUpdate {
	if i != nil {
		gpu.SetGameID(*i)
	}
	return gpu
}

// SetUser sets the "user" edge to the User entity.
func (gpu *GamePlayerUpdate) SetUser(u *User) *GamePlayerUpdate {
	return gpu.SetUserID(u.ID)
}

// SetGame sets the "game" edge to the Game entity.
func (gpu *GamePlayerUpdate) SetGame(g *Game) *GamePlayerUpdate {
	return gpu.SetGameID(g.ID)
}

// Mutation returns the GamePlayerMutation object of the builder.
func (gpu *GamePlayerUpdate) Mutation() *GamePlayerMutation {
	return gpu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (gpu *GamePlayerUpdate) ClearUser() *GamePlayerUpdate {
	gpu.mutation.ClearUser()
	return gpu
}

// ClearGame clears the "game" edge to the Game entity.
func (gpu *GamePlayerUpdate) ClearGame() *GamePlayerUpdate {
	gpu.mutation.ClearGame()
	return gpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gpu *GamePlayerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gpu.sqlSave, gpu.mutation, gpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gpu *GamePlayerUpdate) SaveX(ctx context.Context) int {
	affected, err := gpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gpu *GamePlayerUpdate) Exec(ctx context.Context) error {
	_, err := gpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpu *GamePlayerUpdate) ExecX(ctx context.Context) {
	if err := gpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gpu *GamePlayerUpdate) check() error {
	if gpu.mutation.UserCleared() && len(gpu.mutation.UserIDs()) > 0 {
		return errors.New(`codegen: clearing a required unique edge "GamePlayer.user"`)
	}
	if gpu.mutation.GameCleared() && len(gpu.mutation.GameIDs()) > 0 {
		return errors.New(`codegen: clearing a required unique edge "GamePlayer.game"`)
	}
	return nil
}

func (gpu *GamePlayerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(gameplayer.Table, gameplayer.Columns, sqlgraph.NewFieldSpec(gameplayer.FieldID, field.TypeInt))
	if ps := gpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gpu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameplayer.UserTable,
			Columns: []string{gameplayer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameplayer.UserTable,
			Columns: []string{gameplayer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gpu.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameplayer.GameTable,
			Columns: []string{gameplayer.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpu.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameplayer.GameTable,
			Columns: []string{gameplayer.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameplayer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gpu.mutation.done = true
	return n, nil
}

// GamePlayerUpdateOne is the builder for updating a single GamePlayer entity.
type GamePlayerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GamePlayerMutation
}

// SetUserID sets the "user_id" field.
func (gpuo *GamePlayerUpdateOne) SetUserID(i int) *GamePlayerUpdateOne {
	gpuo.mutation.SetUserID(i)
	return gpuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (gpuo *GamePlayerUpdateOne) SetNillableUserID(i *int) *GamePlayerUpdateOne {
	if i != nil {
		gpuo.SetUserID(*i)
	}
	return gpuo
}

// SetGameID sets the "game_id" field.
func (gpuo *GamePlayerUpdateOne) SetGameID(i int) *GamePlayerUpdateOne {
	gpuo.mutation.SetGameID(i)
	return gpuo
}

// SetNillableGameID sets the "game_id" field if the given value is not nil.
func (gpuo *GamePlayerUpdateOne) SetNillableGameID(i *int) *GamePlayerUpdateOne {
	if i != nil {
		gpuo.SetGameID(*i)
	}
	return gpuo
}

// SetUser sets the "user" edge to the User entity.
func (gpuo *GamePlayerUpdateOne) SetUser(u *User) *GamePlayerUpdateOne {
	return gpuo.SetUserID(u.ID)
}

// SetGame sets the "game" edge to the Game entity.
func (gpuo *GamePlayerUpdateOne) SetGame(g *Game) *GamePlayerUpdateOne {
	return gpuo.SetGameID(g.ID)
}

// Mutation returns the GamePlayerMutation object of the builder.
func (gpuo *GamePlayerUpdateOne) Mutation() *GamePlayerMutation {
	return gpuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (gpuo *GamePlayerUpdateOne) ClearUser() *GamePlayerUpdateOne {
	gpuo.mutation.ClearUser()
	return gpuo
}

// ClearGame clears the "game" edge to the Game entity.
func (gpuo *GamePlayerUpdateOne) ClearGame() *GamePlayerUpdateOne {
	gpuo.mutation.ClearGame()
	return gpuo
}

// Where appends a list predicates to the GamePlayerUpdate builder.
func (gpuo *GamePlayerUpdateOne) Where(ps ...predicate.GamePlayer) *GamePlayerUpdateOne {
	gpuo.mutation.Where(ps...)
	return gpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gpuo *GamePlayerUpdateOne) Select(field string, fields ...string) *GamePlayerUpdateOne {
	gpuo.fields = append([]string{field}, fields...)
	return gpuo
}

// Save executes the query and returns the updated GamePlayer entity.
func (gpuo *GamePlayerUpdateOne) Save(ctx context.Context) (*GamePlayer, error) {
	return withHooks(ctx, gpuo.sqlSave, gpuo.mutation, gpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gpuo *GamePlayerUpdateOne) SaveX(ctx context.Context) *GamePlayer {
	node, err := gpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gpuo *GamePlayerUpdateOne) Exec(ctx context.Context) error {
	_, err := gpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpuo *GamePlayerUpdateOne) ExecX(ctx context.Context) {
	if err := gpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gpuo *GamePlayerUpdateOne) check() error {
	if gpuo.mutation.UserCleared() && len(gpuo.mutation.UserIDs()) > 0 {
		return errors.New(`codegen: clearing a required unique edge "GamePlayer.user"`)
	}
	if gpuo.mutation.GameCleared() && len(gpuo.mutation.GameIDs()) > 0 {
		return errors.New(`codegen: clearing a required unique edge "GamePlayer.game"`)
	}
	return nil
}

func (gpuo *GamePlayerUpdateOne) sqlSave(ctx context.Context) (_node *GamePlayer, err error) {
	if err := gpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(gameplayer.Table, gameplayer.Columns, sqlgraph.NewFieldSpec(gameplayer.FieldID, field.TypeInt))
	id, ok := gpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`codegen: missing "GamePlayer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gameplayer.FieldID)
		for _, f := range fields {
			if !gameplayer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("codegen: invalid field %q for query", f)}
			}
			if f != gameplayer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gpuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameplayer.UserTable,
			Columns: []string{gameplayer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameplayer.UserTable,
			Columns: []string{gameplayer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gpuo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameplayer.GameTable,
			Columns: []string{gameplayer.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpuo.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameplayer.GameTable,
			Columns: []string{gameplayer.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GamePlayer{config: gpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameplayer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gpuo.mutation.done = true
	return _node, nil
}
