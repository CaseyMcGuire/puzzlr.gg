// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"puzzlr.gg/src/server/db/ent/codegen/game"
	"puzzlr.gg/src/server/db/ent/codegen/gameplayer"
	"puzzlr.gg/src/server/db/ent/codegen/predicate"
	"puzzlr.gg/src/server/db/ent/codegen/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGame       = "Game"
	TypeGamePlayer = "GamePlayer"
	TypeUser       = "User"
)

// GameMutation represents an operation that mutates the Game nodes in the graph.
type GameMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	create_time         *time.Time
	update_time         *time.Time
	_type               *game.Type
	board               *[][]string
	appendboard         [][]string
	clearedFields       map[string]struct{}
	user                map[int]struct{}
	removeduser         map[int]struct{}
	cleareduser         bool
	winner              *int
	clearedwinner       bool
	current_turn        *int
	clearedcurrent_turn bool
	game_player         map[int]struct{}
	removedgame_player  map[int]struct{}
	clearedgame_player  bool
	done                bool
	oldValue            func(context.Context) (*Game, error)
	predicates          []predicate.Game
}

var _ ent.Mutation = (*GameMutation)(nil)

// gameOption allows management of the mutation configuration using functional options.
type gameOption func(*GameMutation)

// newGameMutation creates new mutation for the Game entity.
func newGameMutation(c config, op Op, opts ...gameOption) *GameMutation {
	m := &GameMutation{
		config:        c,
		op:            op,
		typ:           TypeGame,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGameID sets the ID field of the mutation.
func withGameID(id int) gameOption {
	return func(m *GameMutation) {
		var (
			err   error
			once  sync.Once
			value *Game
		)
		m.oldValue = func(ctx context.Context) (*Game, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Game.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGame sets the old Game of the mutation.
func withGame(node *Game) gameOption {
	return func(m *GameMutation) {
		m.oldValue = func(context.Context) (*Game, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GameMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GameMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("codegen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GameMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GameMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Game.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *GameMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *GameMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Game entity.
// If the Game object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *GameMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *GameMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *GameMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Game entity.
// If the Game object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *GameMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetType sets the "type" field.
func (m *GameMutation) SetType(ga game.Type) {
	m._type = &ga
}

// GetType returns the value of the "type" field in the mutation.
func (m *GameMutation) GetType() (r game.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Game entity.
// If the Game object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameMutation) OldType(ctx context.Context) (v game.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *GameMutation) ResetType() {
	m._type = nil
}

// SetBoard sets the "board" field.
func (m *GameMutation) SetBoard(s [][]string) {
	m.board = &s
	m.appendboard = nil
}

// Board returns the value of the "board" field in the mutation.
func (m *GameMutation) Board() (r [][]string, exists bool) {
	v := m.board
	if v == nil {
		return
	}
	return *v, true
}

// OldBoard returns the old "board" field's value of the Game entity.
// If the Game object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameMutation) OldBoard(ctx context.Context) (v [][]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBoard is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBoard requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBoard: %w", err)
	}
	return oldValue.Board, nil
}

// AppendBoard adds s to the "board" field.
func (m *GameMutation) AppendBoard(s [][]string) {
	m.appendboard = append(m.appendboard, s...)
}

// AppendedBoard returns the list of values that were appended to the "board" field in this mutation.
func (m *GameMutation) AppendedBoard() ([][]string, bool) {
	if len(m.appendboard) == 0 {
		return nil, false
	}
	return m.appendboard, true
}

// ResetBoard resets all changes to the "board" field.
func (m *GameMutation) ResetBoard() {
	m.board = nil
	m.appendboard = nil
}

// AddUserIDs adds the "user" edge to the User entity by ids.
func (m *GameMutation) AddUserIDs(ids ...int) {
	if m.user == nil {
		m.user = make(map[int]struct{})
	}
	for i := range ids {
		m.user[ids[i]] = struct{}{}
	}
}

// ClearUser clears the "user" edge to the User entity.
func (m *GameMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *GameMutation) UserCleared() bool {
	return m.cleareduser
}

// RemoveUserIDs removes the "user" edge to the User entity by IDs.
func (m *GameMutation) RemoveUserIDs(ids ...int) {
	if m.removeduser == nil {
		m.removeduser = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user, ids[i])
		m.removeduser[ids[i]] = struct{}{}
	}
}

// RemovedUser returns the removed IDs of the "user" edge to the User entity.
func (m *GameMutation) RemovedUserIDs() (ids []int) {
	for id := range m.removeduser {
		ids = append(ids, id)
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
func (m *GameMutation) UserIDs() (ids []int) {
	for id := range m.user {
		ids = append(ids, id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GameMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
	m.removeduser = nil
}

// SetWinnerID sets the "winner" edge to the User entity by id.
func (m *GameMutation) SetWinnerID(id int) {
	m.winner = &id
}

// ClearWinner clears the "winner" edge to the User entity.
func (m *GameMutation) ClearWinner() {
	m.clearedwinner = true
}

// WinnerCleared reports if the "winner" edge to the User entity was cleared.
func (m *GameMutation) WinnerCleared() bool {
	return m.clearedwinner
}

// WinnerID returns the "winner" edge ID in the mutation.
func (m *GameMutation) WinnerID() (id int, exists bool) {
	if m.winner != nil {
		return *m.winner, true
	}
	return
}

// WinnerIDs returns the "winner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WinnerID instead. It exists only for internal usage by the builders.
func (m *GameMutation) WinnerIDs() (ids []int) {
	if id := m.winner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWinner resets all changes to the "winner" edge.
func (m *GameMutation) ResetWinner() {
	m.winner = nil
	m.clearedwinner = false
}

// SetCurrentTurnID sets the "current_turn" edge to the User entity by id.
func (m *GameMutation) SetCurrentTurnID(id int) {
	m.current_turn = &id
}

// ClearCurrentTurn clears the "current_turn" edge to the User entity.
func (m *GameMutation) ClearCurrentTurn() {
	m.clearedcurrent_turn = true
}

// CurrentTurnCleared reports if the "current_turn" edge to the User entity was cleared.
func (m *GameMutation) CurrentTurnCleared() bool {
	return m.clearedcurrent_turn
}

// CurrentTurnID returns the "current_turn" edge ID in the mutation.
func (m *GameMutation) CurrentTurnID() (id int, exists bool) {
	if m.current_turn != nil {
		return *m.current_turn, true
	}
	return
}

// CurrentTurnIDs returns the "current_turn" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CurrentTurnID instead. It exists only for internal usage by the builders.
func (m *GameMutation) CurrentTurnIDs() (ids []int) {
	if id := m.current_turn; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCurrentTurn resets all changes to the "current_turn" edge.
func (m *GameMutation) ResetCurrentTurn() {
	m.current_turn = nil
	m.clearedcurrent_turn = false
}

// AddGamePlayerIDs adds the "game_player" edge to the GamePlayer entity by ids.
func (m *GameMutation) AddGamePlayerIDs(ids ...int) {
	if m.game_player == nil {
		m.game_player = make(map[int]struct{})
	}
	for i := range ids {
		m.game_player[ids[i]] = struct{}{}
	}
}

// ClearGamePlayer clears the "game_player" edge to the GamePlayer entity.
func (m *GameMutation) ClearGamePlayer() {
	m.clearedgame_player = true
}

// GamePlayerCleared reports if the "game_player" edge to the GamePlayer entity was cleared.
func (m *GameMutation) GamePlayerCleared() bool {
	return m.clearedgame_player
}

// RemoveGamePlayerIDs removes the "game_player" edge to the GamePlayer entity by IDs.
func (m *GameMutation) RemoveGamePlayerIDs(ids ...int) {
	if m.removedgame_player == nil {
		m.removedgame_player = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.game_player, ids[i])
		m.removedgame_player[ids[i]] = struct{}{}
	}
}

// RemovedGamePlayer returns the removed IDs of the "game_player" edge to the GamePlayer entity.
func (m *GameMutation) RemovedGamePlayerIDs() (ids []int) {
	for id := range m.removedgame_player {
		ids = append(ids, id)
	}
	return
}

// GamePlayerIDs returns the "game_player" edge IDs in the mutation.
func (m *GameMutation) GamePlayerIDs() (ids []int) {
	for id := range m.game_player {
		ids = append(ids, id)
	}
	return
}

// ResetGamePlayer resets all changes to the "game_player" edge.
func (m *GameMutation) ResetGamePlayer() {
	m.game_player = nil
	m.clearedgame_player = false
	m.removedgame_player = nil
}

// Where appends a list predicates to the GameMutation builder.
func (m *GameMutation) Where(ps ...predicate.Game) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GameMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GameMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Game, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GameMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GameMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Game).
func (m *GameMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GameMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, game.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, game.FieldUpdateTime)
	}
	if m._type != nil {
		fields = append(fields, game.FieldType)
	}
	if m.board != nil {
		fields = append(fields, game.FieldBoard)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GameMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case game.FieldCreateTime:
		return m.CreateTime()
	case game.FieldUpdateTime:
		return m.UpdateTime()
	case game.FieldType:
		return m.GetType()
	case game.FieldBoard:
		return m.Board()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GameMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case game.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case game.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case game.FieldType:
		return m.OldType(ctx)
	case game.FieldBoard:
		return m.OldBoard(ctx)
	}
	return nil, fmt.Errorf("unknown Game field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameMutation) SetField(name string, value ent.Value) error {
	switch name {
	case game.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case game.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case game.FieldType:
		v, ok := value.(game.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case game.FieldBoard:
		v, ok := value.([][]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBoard(v)
		return nil
	}
	return fmt.Errorf("unknown Game field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GameMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GameMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Game numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GameMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GameMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GameMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Game nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GameMutation) ResetField(name string) error {
	switch name {
	case game.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case game.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case game.FieldType:
		m.ResetType()
		return nil
	case game.FieldBoard:
		m.ResetBoard()
		return nil
	}
	return fmt.Errorf("unknown Game field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GameMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.user != nil {
		edges = append(edges, game.EdgeUser)
	}
	if m.winner != nil {
		edges = append(edges, game.EdgeWinner)
	}
	if m.current_turn != nil {
		edges = append(edges, game.EdgeCurrentTurn)
	}
	if m.game_player != nil {
		edges = append(edges, game.EdgeGamePlayer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GameMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case game.EdgeUser:
		ids := make([]ent.Value, 0, len(m.user))
		for id := range m.user {
			ids = append(ids, id)
		}
		return ids
	case game.EdgeWinner:
		if id := m.winner; id != nil {
			return []ent.Value{*id}
		}
	case game.EdgeCurrentTurn:
		if id := m.current_turn; id != nil {
			return []ent.Value{*id}
		}
	case game.EdgeGamePlayer:
		ids := make([]ent.Value, 0, len(m.game_player))
		for id := range m.game_player {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GameMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removeduser != nil {
		edges = append(edges, game.EdgeUser)
	}
	if m.removedgame_player != nil {
		edges = append(edges, game.EdgeGamePlayer)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GameMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case game.EdgeUser:
		ids := make([]ent.Value, 0, len(m.removeduser))
		for id := range m.removeduser {
			ids = append(ids, id)
		}
		return ids
	case game.EdgeGamePlayer:
		ids := make([]ent.Value, 0, len(m.removedgame_player))
		for id := range m.removedgame_player {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GameMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareduser {
		edges = append(edges, game.EdgeUser)
	}
	if m.clearedwinner {
		edges = append(edges, game.EdgeWinner)
	}
	if m.clearedcurrent_turn {
		edges = append(edges, game.EdgeCurrentTurn)
	}
	if m.clearedgame_player {
		edges = append(edges, game.EdgeGamePlayer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GameMutation) EdgeCleared(name string) bool {
	switch name {
	case game.EdgeUser:
		return m.cleareduser
	case game.EdgeWinner:
		return m.clearedwinner
	case game.EdgeCurrentTurn:
		return m.clearedcurrent_turn
	case game.EdgeGamePlayer:
		return m.clearedgame_player
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GameMutation) ClearEdge(name string) error {
	switch name {
	case game.EdgeWinner:
		m.ClearWinner()
		return nil
	case game.EdgeCurrentTurn:
		m.ClearCurrentTurn()
		return nil
	}
	return fmt.Errorf("unknown Game unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GameMutation) ResetEdge(name string) error {
	switch name {
	case game.EdgeUser:
		m.ResetUser()
		return nil
	case game.EdgeWinner:
		m.ResetWinner()
		return nil
	case game.EdgeCurrentTurn:
		m.ResetCurrentTurn()
		return nil
	case game.EdgeGamePlayer:
		m.ResetGamePlayer()
		return nil
	}
	return fmt.Errorf("unknown Game edge %s", name)
}

// GamePlayerMutation represents an operation that mutates the GamePlayer nodes in the graph.
type GamePlayerMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	game          *int
	clearedgame   bool
	done          bool
	oldValue      func(context.Context) (*GamePlayer, error)
	predicates    []predicate.GamePlayer
}

var _ ent.Mutation = (*GamePlayerMutation)(nil)

// gameplayerOption allows management of the mutation configuration using functional options.
type gameplayerOption func(*GamePlayerMutation)

// newGamePlayerMutation creates new mutation for the GamePlayer entity.
func newGamePlayerMutation(c config, op Op, opts ...gameplayerOption) *GamePlayerMutation {
	m := &GamePlayerMutation{
		config:        c,
		op:            op,
		typ:           TypeGamePlayer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGamePlayerID sets the ID field of the mutation.
func withGamePlayerID(id int) gameplayerOption {
	return func(m *GamePlayerMutation) {
		var (
			err   error
			once  sync.Once
			value *GamePlayer
		)
		m.oldValue = func(ctx context.Context) (*GamePlayer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GamePlayer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGamePlayer sets the old GamePlayer of the mutation.
func withGamePlayer(node *GamePlayer) gameplayerOption {
	return func(m *GamePlayerMutation) {
		m.oldValue = func(context.Context) (*GamePlayer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GamePlayerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GamePlayerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("codegen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GamePlayerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GamePlayerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GamePlayer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *GamePlayerMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *GamePlayerMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the GamePlayer entity.
// If the GamePlayer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GamePlayerMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *GamePlayerMutation) ResetUserID() {
	m.user = nil
}

// SetGameID sets the "game_id" field.
func (m *GamePlayerMutation) SetGameID(i int) {
	m.game = &i
}

// GameID returns the value of the "game_id" field in the mutation.
func (m *GamePlayerMutation) GameID() (r int, exists bool) {
	v := m.game
	if v == nil {
		return
	}
	return *v, true
}

// OldGameID returns the old "game_id" field's value of the GamePlayer entity.
// If the GamePlayer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GamePlayerMutation) OldGameID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGameID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGameID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGameID: %w", err)
	}
	return oldValue.GameID, nil
}

// ResetGameID resets all changes to the "game_id" field.
func (m *GamePlayerMutation) ResetGameID() {
	m.game = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *GamePlayerMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[gameplayer.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *GamePlayerMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *GamePlayerMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GamePlayerMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearGame clears the "game" edge to the Game entity.
func (m *GamePlayerMutation) ClearGame() {
	m.clearedgame = true
	m.clearedFields[gameplayer.FieldGameID] = struct{}{}
}

// GameCleared reports if the "game" edge to the Game entity was cleared.
func (m *GamePlayerMutation) GameCleared() bool {
	return m.clearedgame
}

// GameIDs returns the "game" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GameID instead. It exists only for internal usage by the builders.
func (m *GamePlayerMutation) GameIDs() (ids []int) {
	if id := m.game; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGame resets all changes to the "game" edge.
func (m *GamePlayerMutation) ResetGame() {
	m.game = nil
	m.clearedgame = false
}

// Where appends a list predicates to the GamePlayerMutation builder.
func (m *GamePlayerMutation) Where(ps ...predicate.GamePlayer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GamePlayerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GamePlayerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GamePlayer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GamePlayerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GamePlayerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GamePlayer).
func (m *GamePlayerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GamePlayerMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.user != nil {
		fields = append(fields, gameplayer.FieldUserID)
	}
	if m.game != nil {
		fields = append(fields, gameplayer.FieldGameID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GamePlayerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gameplayer.FieldUserID:
		return m.UserID()
	case gameplayer.FieldGameID:
		return m.GameID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GamePlayerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gameplayer.FieldUserID:
		return m.OldUserID(ctx)
	case gameplayer.FieldGameID:
		return m.OldGameID(ctx)
	}
	return nil, fmt.Errorf("unknown GamePlayer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GamePlayerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gameplayer.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case gameplayer.FieldGameID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGameID(v)
		return nil
	}
	return fmt.Errorf("unknown GamePlayer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GamePlayerMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GamePlayerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GamePlayerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GamePlayer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GamePlayerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GamePlayerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GamePlayerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GamePlayer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GamePlayerMutation) ResetField(name string) error {
	switch name {
	case gameplayer.FieldUserID:
		m.ResetUserID()
		return nil
	case gameplayer.FieldGameID:
		m.ResetGameID()
		return nil
	}
	return fmt.Errorf("unknown GamePlayer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GamePlayerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, gameplayer.EdgeUser)
	}
	if m.game != nil {
		edges = append(edges, gameplayer.EdgeGame)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GamePlayerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gameplayer.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case gameplayer.EdgeGame:
		if id := m.game; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GamePlayerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GamePlayerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GamePlayerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, gameplayer.EdgeUser)
	}
	if m.clearedgame {
		edges = append(edges, gameplayer.EdgeGame)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GamePlayerMutation) EdgeCleared(name string) bool {
	switch name {
	case gameplayer.EdgeUser:
		return m.cleareduser
	case gameplayer.EdgeGame:
		return m.clearedgame
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GamePlayerMutation) ClearEdge(name string) error {
	switch name {
	case gameplayer.EdgeUser:
		m.ClearUser()
		return nil
	case gameplayer.EdgeGame:
		m.ClearGame()
		return nil
	}
	return fmt.Errorf("unknown GamePlayer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GamePlayerMutation) ResetEdge(name string) error {
	switch name {
	case gameplayer.EdgeUser:
		m.ResetUser()
		return nil
	case gameplayer.EdgeGame:
		m.ResetGame()
		return nil
	}
	return fmt.Errorf("unknown GamePlayer edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	email              *string
	hashed_password    *string
	clearedFields      map[string]struct{}
	games              map[int]struct{}
	removedgames       map[int]struct{}
	clearedgames       bool
	won_games          map[int]struct{}
	removedwon_games   map[int]struct{}
	clearedwon_games   bool
	turn_games         map[int]struct{}
	removedturn_games  map[int]struct{}
	clearedturn_games  bool
	game_player        map[int]struct{}
	removedgame_player map[int]struct{}
	clearedgame_player bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("codegen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetHashedPassword sets the "hashed_password" field.
func (m *UserMutation) SetHashedPassword(s string) {
	m.hashed_password = &s
}

// HashedPassword returns the value of the "hashed_password" field in the mutation.
func (m *UserMutation) HashedPassword() (r string, exists bool) {
	v := m.hashed_password
	if v == nil {
		return
	}
	return *v, true
}

// OldHashedPassword returns the old "hashed_password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHashedPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashedPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashedPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashedPassword: %w", err)
	}
	return oldValue.HashedPassword, nil
}

// ResetHashedPassword resets all changes to the "hashed_password" field.
func (m *UserMutation) ResetHashedPassword() {
	m.hashed_password = nil
}

// AddGameIDs adds the "games" edge to the Game entity by ids.
func (m *UserMutation) AddGameIDs(ids ...int) {
	if m.games == nil {
		m.games = make(map[int]struct{})
	}
	for i := range ids {
		m.games[ids[i]] = struct{}{}
	}
}

// ClearGames clears the "games" edge to the Game entity.
func (m *UserMutation) ClearGames() {
	m.clearedgames = true
}

// GamesCleared reports if the "games" edge to the Game entity was cleared.
func (m *UserMutation) GamesCleared() bool {
	return m.clearedgames
}

// RemoveGameIDs removes the "games" edge to the Game entity by IDs.
func (m *UserMutation) RemoveGameIDs(ids ...int) {
	if m.removedgames == nil {
		m.removedgames = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.games, ids[i])
		m.removedgames[ids[i]] = struct{}{}
	}
}

// RemovedGames returns the removed IDs of the "games" edge to the Game entity.
func (m *UserMutation) RemovedGamesIDs() (ids []int) {
	for id := range m.removedgames {
		ids = append(ids, id)
	}
	return
}

// GamesIDs returns the "games" edge IDs in the mutation.
func (m *UserMutation) GamesIDs() (ids []int) {
	for id := range m.games {
		ids = append(ids, id)
	}
	return
}

// ResetGames resets all changes to the "games" edge.
func (m *UserMutation) ResetGames() {
	m.games = nil
	m.clearedgames = false
	m.removedgames = nil
}

// AddWonGameIDs adds the "won_games" edge to the Game entity by ids.
func (m *UserMutation) AddWonGameIDs(ids ...int) {
	if m.won_games == nil {
		m.won_games = make(map[int]struct{})
	}
	for i := range ids {
		m.won_games[ids[i]] = struct{}{}
	}
}

// ClearWonGames clears the "won_games" edge to the Game entity.
func (m *UserMutation) ClearWonGames() {
	m.clearedwon_games = true
}

// WonGamesCleared reports if the "won_games" edge to the Game entity was cleared.
func (m *UserMutation) WonGamesCleared() bool {
	return m.clearedwon_games
}

// RemoveWonGameIDs removes the "won_games" edge to the Game entity by IDs.
func (m *UserMutation) RemoveWonGameIDs(ids ...int) {
	if m.removedwon_games == nil {
		m.removedwon_games = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.won_games, ids[i])
		m.removedwon_games[ids[i]] = struct{}{}
	}
}

// RemovedWonGames returns the removed IDs of the "won_games" edge to the Game entity.
func (m *UserMutation) RemovedWonGamesIDs() (ids []int) {
	for id := range m.removedwon_games {
		ids = append(ids, id)
	}
	return
}

// WonGamesIDs returns the "won_games" edge IDs in the mutation.
func (m *UserMutation) WonGamesIDs() (ids []int) {
	for id := range m.won_games {
		ids = append(ids, id)
	}
	return
}

// ResetWonGames resets all changes to the "won_games" edge.
func (m *UserMutation) ResetWonGames() {
	m.won_games = nil
	m.clearedwon_games = false
	m.removedwon_games = nil
}

// AddTurnGameIDs adds the "turn_games" edge to the Game entity by ids.
func (m *UserMutation) AddTurnGameIDs(ids ...int) {
	if m.turn_games == nil {
		m.turn_games = make(map[int]struct{})
	}
	for i := range ids {
		m.turn_games[ids[i]] = struct{}{}
	}
}

// ClearTurnGames clears the "turn_games" edge to the Game entity.
func (m *UserMutation) ClearTurnGames() {
	m.clearedturn_games = true
}

// TurnGamesCleared reports if the "turn_games" edge to the Game entity was cleared.
func (m *UserMutation) TurnGamesCleared() bool {
	return m.clearedturn_games
}

// RemoveTurnGameIDs removes the "turn_games" edge to the Game entity by IDs.
func (m *UserMutation) RemoveTurnGameIDs(ids ...int) {
	if m.removedturn_games == nil {
		m.removedturn_games = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.turn_games, ids[i])
		m.removedturn_games[ids[i]] = struct{}{}
	}
}

// RemovedTurnGames returns the removed IDs of the "turn_games" edge to the Game entity.
func (m *UserMutation) RemovedTurnGamesIDs() (ids []int) {
	for id := range m.removedturn_games {
		ids = append(ids, id)
	}
	return
}

// TurnGamesIDs returns the "turn_games" edge IDs in the mutation.
func (m *UserMutation) TurnGamesIDs() (ids []int) {
	for id := range m.turn_games {
		ids = append(ids, id)
	}
	return
}

// ResetTurnGames resets all changes to the "turn_games" edge.
func (m *UserMutation) ResetTurnGames() {
	m.turn_games = nil
	m.clearedturn_games = false
	m.removedturn_games = nil
}

// AddGamePlayerIDs adds the "game_player" edge to the GamePlayer entity by ids.
func (m *UserMutation) AddGamePlayerIDs(ids ...int) {
	if m.game_player == nil {
		m.game_player = make(map[int]struct{})
	}
	for i := range ids {
		m.game_player[ids[i]] = struct{}{}
	}
}

// ClearGamePlayer clears the "game_player" edge to the GamePlayer entity.
func (m *UserMutation) ClearGamePlayer() {
	m.clearedgame_player = true
}

// GamePlayerCleared reports if the "game_player" edge to the GamePlayer entity was cleared.
func (m *UserMutation) GamePlayerCleared() bool {
	return m.clearedgame_player
}

// RemoveGamePlayerIDs removes the "game_player" edge to the GamePlayer entity by IDs.
func (m *UserMutation) RemoveGamePlayerIDs(ids ...int) {
	if m.removedgame_player == nil {
		m.removedgame_player = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.game_player, ids[i])
		m.removedgame_player[ids[i]] = struct{}{}
	}
}

// RemovedGamePlayer returns the removed IDs of the "game_player" edge to the GamePlayer entity.
func (m *UserMutation) RemovedGamePlayerIDs() (ids []int) {
	for id := range m.removedgame_player {
		ids = append(ids, id)
	}
	return
}

// GamePlayerIDs returns the "game_player" edge IDs in the mutation.
func (m *UserMutation) GamePlayerIDs() (ids []int) {
	for id := range m.game_player {
		ids = append(ids, id)
	}
	return
}

// ResetGamePlayer resets all changes to the "game_player" edge.
func (m *UserMutation) ResetGamePlayer() {
	m.game_player = nil
	m.clearedgame_player = false
	m.removedgame_player = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.hashed_password != nil {
		fields = append(fields, user.FieldHashedPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	case user.FieldHashedPassword:
		return m.HashedPassword()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldHashedPassword:
		return m.OldHashedPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldHashedPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashedPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldHashedPassword:
		m.ResetHashedPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.games != nil {
		edges = append(edges, user.EdgeGames)
	}
	if m.won_games != nil {
		edges = append(edges, user.EdgeWonGames)
	}
	if m.turn_games != nil {
		edges = append(edges, user.EdgeTurnGames)
	}
	if m.game_player != nil {
		edges = append(edges, user.EdgeGamePlayer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeGames:
		ids := make([]ent.Value, 0, len(m.games))
		for id := range m.games {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeWonGames:
		ids := make([]ent.Value, 0, len(m.won_games))
		for id := range m.won_games {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTurnGames:
		ids := make([]ent.Value, 0, len(m.turn_games))
		for id := range m.turn_games {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGamePlayer:
		ids := make([]ent.Value, 0, len(m.game_player))
		for id := range m.game_player {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedgames != nil {
		edges = append(edges, user.EdgeGames)
	}
	if m.removedwon_games != nil {
		edges = append(edges, user.EdgeWonGames)
	}
	if m.removedturn_games != nil {
		edges = append(edges, user.EdgeTurnGames)
	}
	if m.removedgame_player != nil {
		edges = append(edges, user.EdgeGamePlayer)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeGames:
		ids := make([]ent.Value, 0, len(m.removedgames))
		for id := range m.removedgames {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeWonGames:
		ids := make([]ent.Value, 0, len(m.removedwon_games))
		for id := range m.removedwon_games {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTurnGames:
		ids := make([]ent.Value, 0, len(m.removedturn_games))
		for id := range m.removedturn_games {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGamePlayer:
		ids := make([]ent.Value, 0, len(m.removedgame_player))
		for id := range m.removedgame_player {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedgames {
		edges = append(edges, user.EdgeGames)
	}
	if m.clearedwon_games {
		edges = append(edges, user.EdgeWonGames)
	}
	if m.clearedturn_games {
		edges = append(edges, user.EdgeTurnGames)
	}
	if m.clearedgame_player {
		edges = append(edges, user.EdgeGamePlayer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeGames:
		return m.clearedgames
	case user.EdgeWonGames:
		return m.clearedwon_games
	case user.EdgeTurnGames:
		return m.clearedturn_games
	case user.EdgeGamePlayer:
		return m.clearedgame_player
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeGames:
		m.ResetGames()
		return nil
	case user.EdgeWonGames:
		m.ResetWonGames()
		return nil
	case user.EdgeTurnGames:
		m.ResetTurnGames()
		return nil
	case user.EdgeGamePlayer:
		m.ResetGamePlayer()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
